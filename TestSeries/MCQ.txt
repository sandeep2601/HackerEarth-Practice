In OOP, a friend function of a class has exclusive access to which members of that class?

Private & protected members
Public & protected members
Private & public members
Private members
Protected members



In OOP, which of the following functions is used to implement the late binding mechanism?

Virtual
Operator
Const
Static



In OOP, which of the following syntaxes is used to access a class data member using this pointer?

this->x
this.x
*this.x
*this-x



In OOP, which of the following signifies an abstract class?

Declaring it as abstract by using a static keyword
Declaring it as abstract by using a virtual keyword
Making at least one member function a virtual function
Making at least one member function a pure virtual function



In Hibernate, which element, within the id element, is used to automatically generate primary key values?

<class>
<meta>
<property>
<generator>



In Hibernate, which of these is a valid statement for creating a SessionFactory object?

SessionFactory sf= new Configuration().configure().SessionFactory();
SessionFactory sf = new Configuration().buildSessionFactory();
SessionFactory sf= new configure().buildSessionFactory();
SessionFactory sf = new Configuration().configure().buildSessionFactory();



Assume the following:
In Spring, file is an abstract class that comprises the toFile() method.
It also contains two concrete classes called ImageFile and BinaryFile.
The toFile() method is implemented in both the concrete classes.
Which of the following file will you reference and call the toFile() method for?

Binary file
Image file
Both of these
None of these



In Spring, which of the following interfaces is used to map a database row to a Java object?

ResultSet
RowMapper
RowSetMapper
ResultSetMapper



In Java, which of the following are valid constructors of the Thread class:

Thread(Runnable r, String name)
Thread()
Thread(int priority)
Thread(Runnable r, ThreadGroup g)
Thread(Runnable r, int priority)



What is the output of the following Java code:

class Check {
    public static void main(String [] args) {
        Check p = new Check();
        p.start();
    }

    void start() {
        boolean b1 = false;
        boolean b2 = fix(b1);
        System.out.println(b1 + " " + b2);
    }

    boolean fix(boolean b1) {
        b1 = true;
        return b1;
    }
}
true true
false true
true false
false false